spring:
  config:
    import: optional:file:.env[.properties]
  # ======================= App =======================
  application:
    name: social_network_app_dev
  # ======================= Database =======================
  datasource:
    url: jdbc:postgresql://localhost:5432/${DATABASE_NAME}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    # Database connection pool settings
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 5
      minimum-idle: 2
      idle-timeout: 300000
      max-lifetime: 600000
      pool-name: HikariPool-MainService
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    # ======================= Hibernate =======================
    # Hibernate ddl auto (create, create-drop, validate, update)
    hibernate:
      ddl-auto: update
    show-sql: true
    #- avoid lazy initialization error.
    open-in-view: false
  # ======================= File Limit =======================
  servlet:
    multipart:
      enabled: true
      # Maximum file size
      max-file-size: 5MB
      # Maximum request size
      max-request-size: 6MB
  #===================== Mail Sender ==========================
  mail:
    host: ${MAIL_SERVICE_HOST}
    port: ${MAIL_SERVICE_PORT}
    username: ${MAIL_SERVICE_USERNAME}
    password: ${MAIL_SERVICE_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
  #===================== Kafka Configuration ==========================
  # Use port 29092 for local development (outside Docker)
  # Inside Docker containers, use kafka:9092
  kafka:
    bootstrap-servers: localhost:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            add:
              type:
                headers: false
    consumer:
      group-id: main-service-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

server:
  port: 8083

# ======================= JWT =======================
app:
  jwtSecret: ${JWT_SECRET_KEY}
  jwtExpirationMs: ${JWT_EXPIRE_IN_MS}

token:
  signing:
    key: ${JWT_SINGING_KEY}

# ======================= Swagger =======================
# Swagger/OpenAPI Configuration - Using defaults for Spring Boot 3.4.x
osama_mh:
  openapi:
    dev-url: ${OPEN_API_DEV_URL}
    prod-url: ${OPEN_API_PRODUCTION_URL}
    localhost-url: http://localhost:${PORT:8080}

# Swagger/OpenAPI Configuration
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  api-docs:
    path: /v3/api-docs

# ======================= encryption =======================
encryption:
  key: ${ENCRYPTION_KEY}

# ======================= File Upload =======================
# Default file upload directory for local development
file:
  upload-dir: src/main/resources/static/uploads/

#===================== Eureka Server Configuration ==========================
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
#eureka.instance.prefer-ip-address=true

#===================== Logging Configuration ==========================
# Reduce Hibernate verbose logging
logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
        orm:
          connections:
            pooling: INFO
    com:
      zaxxer:
        hikari: DEBUG
        HikariConfig: DEBUG

#elk stack
logstash:
  host: localhost
  port: 5000
# Enable Spring property resolution in Logback
#logging.config=classpath:logback-spring-prod.xml