spring:
  config:
    import: optional:file:.env[.properties]
  # ======================= App =======================
  application:
    name: real-estate-api
  # ======================= Database =======================
  datasource:
    url: jdbc:postgresql://localhost:5432/${DATABASE_NAME}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    #spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
  # ======================= Hibernate =======================
  # Hibernate ddl auto (create, create-drop, validate, update)
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
    show-sql: true
    #- avoid lazy initialization error.
    open-in-view: false
  # ======================= File Limit =======================
  # Maximum file size
  servlet:
    multipart:
      enabled: true
      max-file-size: 5MB
      # Maximum request size
      max-request-size: 6MB
  #===================== Mail Sender ==========================
  mail:
    host: ${MAIL_SERVICE_HOST}
    port: ${MAIL_SERVICE_PORT}
    username: ${MAIL_SERVICE_USERNAME}
    password: ${MAIL_SERVICE_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
  #===================== Kafka Configuration ==========================
  kafka:
    bootstrap-servers: localhost:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: notification-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'

server:
  port: ${PORT}

# ======================= JWT =======================
app:
  jwtSecret: ${JWT_SECRET_KEY}
  jwtExpirationMs: ${JWT_EXPIRE_IN_MS}

token:
  signing:
    key: ${JWT_SINGING_KEY}

# ======================= Swagger =======================
osama_mh:
  openapi:
    dev-url: ${OPEN_API_DEV_URL}
    prod-url: ${OPEN_API_PRODUCTION_URL}
    localhost-url: http://localhost:${PORT:8081}

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui
    enabled: true

# ======================= encryption =======================
encryption:
  key: ${ENCRYPTION_KEY}

# ======================= File Upload =======================
# Default file upload directory for local development
file:
  upload-dir: src/main/resources/static/uploads/

#===================== Eureka Server Configuration ==========================
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
#eureka.instance.prefer-ip-address=true

#elk stack
logstash:
  host: localhost
  port: 5000
# Enable Spring property resolution in Logback
#logging.config=classpath:logback-spring-prod.xml