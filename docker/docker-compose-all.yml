services:
  # ======================= Infrastructure Services =======================

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - social_service_dev_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - social_service_dev_network
    volumes:
      - kafka-data:/bitnami/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Kafka UI for monitoring
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9093:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - social_service_dev_network

  # ======================= ELK Stack =======================

  # Elasticsearch for logging and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=123456
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - bootstrap.memory_lock=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - social_service_dev_network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2GB"
        reservations:
          cpus: "0.5"
          memory: "1GB"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash
    volumes:
      - ./elk-stack-docker/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    networks:
      - social_service_dev_network
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "1GB"
        reservations:
          cpus: "0.3"
          memory: "512MB"

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    networks:
      - social_service_dev_network
    volumes:
      - kibana_data:/usr/share/kibana/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "750MB"
        reservations:
          cpus: "0.3"
          memory: "500MB"

  # ======================= Databases =======================
  #redis
  redis:
      image: redis:latest
      container_name: redis
      ports:
      - "6379:6379"
      networks:
      - social_service_dev_network
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5

  # PostgreSQL for auth-service
  auth-db:
    image: postgres:16
    container_name: auth_db
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: osama
      POSTGRES_PASSWORD: 123456
    ports:
      - "5433:5432"
    networks:
      - social_service_dev_network
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U osama -d authdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for main-service
  main-db:
    image: postgres:16
    container_name: main_db
    environment:
      POSTGRES_DB: social_db
      POSTGRES_USER: osama
      POSTGRES_PASSWORD: 123456
    ports:
      - "5434:5432"
    networks:
      - social_service_dev_network
    volumes:
      - main-db-data:/var/lib/postgresql/data
      - ../services/main-service/docker/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U osama -d social_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for chat-service
  chat-db:
    image: mongo:latest
    container_name: chat-service-db
    ports:
      - "27018:27017"
    networks:
      - social_service_dev_network
    volumes:
      - chat-service-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ======================= Microservices =======================

  # Discovery Service (Eureka) - COMMENTED OUT
#  discovery-service:
#    build:
#      context: ../services/discovery-service
#      dockerfile: docker/dev/Dockerfile
#    container_name: eureka-server
#    ports:
#      - "8761:8761"
#    networks:
#      - social_service_dev_network
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 40s

  # Auth Service
  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8087:8087"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth_db:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=osama
      - SPRING_DATASOURCE_PASSWORD=123456
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      auth-db:
        condition: service_healthy
#      discovery-service:
#        condition: service_healthy
    networks:
      - social_service_dev_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8087/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Gateway Service
  gateway-service:
    build:
      context: ../services/gateway-service
      dockerfile: docker/dev/Dockerfile
    container_name: gateway_service
    ports:
      - "8081:8081"
#    environment:
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
#      discovery-service:
#        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - social_service_dev_network

  # Main Service
  main-service:
    build:
      context: ../services/main-service
      dockerfile: docker/dev/Dockerfile
    container_name: main_service
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://main-db:5432/social_db
      - SPRING_DATASOURCE_USERNAME=osama
      - SPRING_DATASOURCE_PASSWORD=123456
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      main-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
#      discovery-service:
#        condition: service_healthy
    networks:
      - social_service_dev_network
    volumes:
      - main-service-uploads:/app/uploads

  # Search Service
  search-service:
    build:
      context: ../services/search-service
      dockerfile: docker/dev/Dockerfile
    container_name: search-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - SPRING_ELASTICSEARCH_USERNAME=elastic
      - SPRING_ELASTICSEARCH_PASSWORD=123456
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
#      discovery-service:
#        condition: service_healthy
    networks:
      - social_service_dev_network

  # Notification Service
  notification-service:
    build:
      context: ../services/notification-service
      dockerfile: docker/dev/Dockerfile
    container_name: notification-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      kafka:
        condition: service_healthy
#      discovery-service:
#        condition: service_healthy
    networks:
      - social_service_dev_network

  # Chat Service
  chat-service:
    build:
      context: ../services/chat-service
      dockerfile: docker/dev/Dockerfile
    container_name: chat-service
    ports:
      - "8086:8086"
    environment:
      - SPRING_DATA_MONGODB_HOST=chat-db
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=chat-service
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      chat-db:
        condition: service_healthy
#      discovery-service:
#        condition: service_healthy
    networks:
      - social_service_dev_network

networks:
  social_service_dev_network:
    driver: bridge

volumes:
  kafka-data:
  elasticsearch_data:
  kibana_data:
  auth-db-data:
  main-db-data:
  chat-service-db-data:
  main-service-uploads:
